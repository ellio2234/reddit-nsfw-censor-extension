{"version":3,"sources":["constants.js","Popup.jsx","index.js"],"names":["CENSOR_LEVEL_KEYS","CENSOR_LEVELS","label","CENSOR_AREA_KEYS","toggleable","getSettings","Promise","resolve","window","chrome","storage","local","get","settings","DEFAULT_SETTINGS","FieldInput","name","rest","input","type","FieldSelect","options","map","option","Popup","prepData","data","omitBy","isEmpty","useState","_setSettings","classificationServerUrl","detectionServerUrl","isClassificationServerThinking","setIsClassificationServerThinking","isDetectionServerThinking","setIsDetectionServerThinking","classificationServerOnline","setClassificationServerOnline","detectionServerOnline","setDetectionServerOnline","setSettings","s","prev","checkServerOnline","serverUrl","a","controller","AbortController","signal","setTimeout","abort","fetch","status","result","checkClassificationServerOnline","classificationServerResult","checkDetectionServerOnline","detectionServerResult","detectionServerStatus","useInterval","classificationServerStatus","useEffect","chromeSettings","console","log","set","className","onSubmit","initialValues","handleSubmit","Object","keys","k","value","for","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.079826c0.chunk.js","sourcesContent":["export const CENSOR_LEVEL_KEYS = {\n  // VERY_LOW: 'very-low',\n  // LOW: 'low',\n  MEDIUM: 'medium',\n  // HIGH: 'high',\n  // VERY_HIGH: 'very-high',\n}\n\nexport const CENSOR_LEVELS = {\n  // [CENSOR_LEVEL_KEYS.VERY_LOW]: {\n  //   label: 'Very low',\n  // },\n  // [CENSOR_LEVEL_KEYS.LOW]: {\n  //   label: 'Low',\n  // },\n  [CENSOR_LEVEL_KEYS.MEDIUM]: {\n    label: 'Medium',\n  },\n  // [CENSOR_LEVEL_KEYS.HIGH]: {\n  //   label: 'High',\n  // },\n  // [CENSOR_LEVEL_KEYS.VERY_HIGH]: {\n  //   label: 'Very high',\n  // },\n}\n\nexport const CENSOR_AREA_KEYS = {\n  FACE: 'face',\n  BREASTS_EXPOSED: 'breasts-exposed',\n  BREASTS_COVERED: 'breasts-covered',\n  GENITALS_EXPOSED: 'genitals-exposed',\n  GENITALS_COVERED: 'genitals-covered',\n  BUTTOCKS_EXPOSED: 'buttocks-exposed',\n  BUTTOCKS_COVERED: 'buttocks-covered',\n  ANUS: 'anus',\n  ARMPITS: 'armpits',\n  STOMACH: 'stomach',\n  FEET: 'feet',\n}\n\nexport const CENSOR_AREAS = {\n  [CENSOR_AREA_KEYS.FACE]: {\n    toggleable: true,\n    label: 'Face',\n  },\n  [CENSOR_AREA_KEYS.BREASTS_EXPOSED]: {\n    toggleable: false,\n    label: 'Breasts (exposed)',\n  },\n  [CENSOR_AREA_KEYS.BREASTS_COVERED]: {\n    toggleable: true,\n    label: 'Breasts (covered)',\n  },\n  [CENSOR_AREA_KEYS.GENITALS_EXPOSED]: {\n    toggleable: false,\n    label: 'Genitals (exposed)',\n  },\n  [CENSOR_AREA_KEYS.GENITALS_COVERED]: {\n    toggleable: true,\n    label: 'Genitals (covered)',\n  },\n  [CENSOR_AREA_KEYS.BUTTOCKS_EXPOSED]: {\n    toggleable: false,\n    label: 'Buttocks (exposed)',\n  },\n  [CENSOR_AREA_KEYS.BUTTOCKS_COVERED]: {\n    toggleable: false,\n    label: 'Buttocks (covered)',\n  },\n  [CENSOR_AREA_KEYS.ANUS]: {\n    toggleable: false,\n    label: 'Anus',\n  },\n  [CENSOR_AREA_KEYS.ARMPITS]: {\n    toggleable: true,\n    label: 'Armpits',\n  },\n  [CENSOR_AREA_KEYS.STOMACH]: {\n    toggleable: true,\n    label: 'Stomach',\n  },\n  [CENSOR_AREA_KEYS.FEET]: {\n    toggleable: true,\n    label: 'Feet',\n  },\n}\n\nexport const CENSOR_TYPE_KEYS = {\n  PIXELS: 'pixels',\n  // BLUR: 'blur',\n  // BAR: 'bar'\n}\n\nexport const CENSOR_TYPES = {\n  [CENSOR_TYPE_KEYS.PIXELS]: {\n    label: 'Pixels'\n  }\n}","import React, { useEffect, useState } from 'react'\nimport { Form, Field } from 'react-final-form'\nimport useInterval from 'use-interval'\nimport omitBy from 'lodash/omitBy'\nimport isEmpty from 'lodash/isEmpty'\nimport {\n  CENSOR_LEVELS,\n  CENSOR_AREAS,\n  CENSOR_TYPES,\n  CENSOR_LEVEL_KEYS\n} from './constants'\nimport './style.css';\n\nconst getSettings = () => new Promise(resolve => {\n  window.chrome.storage.local.get(['n__settings'], (settings) => {\n    resolve(settings['n__settings'])\n  })\n})\n\nconst getSetting = async k => {\n  const settings = await getSettings()\n  return settings[k]\n}\n\nconst DEFAULT_SETTINGS = {\n  'censor-level': CENSOR_LEVEL_KEYS.MEDIUM,\n  'detection-server-url': 'http://localhost:8040',\n  'classification-server-url': 'http://localhost:8041',\n}\n\nconst FieldInput = ({ name, ...rest }) => {\n  return (\n    <Field name={name}>\n      {({ input }) => (\n        <input type=\"text\" {...rest} {...input} />\n      )}\n    </Field>\n  )\n}\n\nconst FieldSelect = ({ options, name, ...rest }) => {\n  return (\n    <Field name={name}>\n      {({ input }) => (\n        <select {...rest} {...input}>\n          {options.map((option) => (\n            <option {...option} />\n          ))}\n        </select>\n      )}\n    </Field>\n  )\n}\n\nconst Popup = () => {\n  const prepData = data => omitBy(data, isEmpty)\n\n  const restoreDefaults = () => _setSettings(DEFAULT_SETTINGS)\n\n  const [settings, _setSettings] = useState({})\n\n  const classificationServerUrl = settings?.['classification-server-url']\n  const detectionServerUrl = settings?.['detection-server-url']\n\n  const [isClassificationServerThinking, setIsClassificationServerThinking] = useState(false)\n  const [isDetectionServerThinking, setIsDetectionServerThinking] = useState(false)\n\n  const [classificationServerOnline, setClassificationServerOnline] = useState()\n  const [detectionServerOnline, setDetectionServerOnline] = useState()\n\n  const setSettings = s => _setSettings(prev => prepData({\n    ...prev,\n    ...s,\n  }))\n\n  const checkServerOnline = async (serverUrl) => {\n    let result\n    const controller = new AbortController();\n    const { signal } = controller;\n    setTimeout(() => controller.abort(), 1000)\n    try {\n      result = (await fetch(`${serverUrl}/sync`, { signal })).status === 405\n    } catch {\n      result = false\n    }\n    return result\n  }\n\n  const checkClassificationServerOnline = async () => {\n    const classificationServerResult = await checkServerOnline(classificationServerUrl)\n    setIsClassificationServerThinking(false)\n    setClassificationServerOnline(classificationServerResult)\n  }\n\n  const checkDetectionServerOnline = async () => {\n    const detectionServerResult = await checkServerOnline(detectionServerUrl)\n    setIsDetectionServerThinking(false)\n    setDetectionServerOnline(detectionServerResult)\n  }\n\n  const checkClassificationServerInterval = useInterval(checkClassificationServerOnline, 1000)\n  const checkDetectionServerInterval = useInterval(checkDetectionServerOnline, 1000)\n\n  const detectionServerStatus = (\n    isDetectionServerThinking\n      ? 'working'\n      : (detectionServerOnline ? 'online' : 'offline')\n  )\n\n  const classificationServerStatus = (\n    isClassificationServerThinking\n      ? 'working'\n      : (classificationServerOnline ? 'online' : 'offline')\n  )\n\n  useEffect(() => {\n    setIsClassificationServerThinking(true)\n  }, [classificationServerUrl])\n\n  useEffect(() => {\n    setIsDetectionServerThinking(true)\n  }, [detectionServerUrl])\n\n  useEffect(() => {\n    (async () => {\n      const chromeSettings = await getSettings()\n      setSettings({ ...DEFAULT_SETTINGS, ...(chromeSettings || {}) })\n    })()\n  }, [])\n\n  useEffect(() => {\n    console.log('settings are', settings)\n    window.chrome.storage.local.set({ 'n__settings': prepData(settings) })\n  }, [settings])\n\n  return (\n    <div className=\"popup\">\n      <h3>Settings</h3>\n      <Form onSubmit={setSettings} initialValues={settings}>\n        {({ handleSubmit }) => (\n          <form onSubmit={handleSubmit}>\n            <section>\n              <label className=\"bold\">Level</label>\n              <FieldSelect name=\"censor-level\" options={Object.keys(CENSOR_LEVELS).map(k => ({ label: CENSOR_LEVELS[k].label, value: k }))} />\n            </section>\n            {/* <span className=\"row\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>Area</th>\n                    <th>Enabled</th>\n                    <th>Type</th>\n                    <th>Strength</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(CENSOR_AREAS).map(k => (\n                    <tr>\n                      <td>{CENSOR_AREAS[k].label}</td>\n                      <td>enabled</td>\n                      <td>\n                        <FieldSelect\n                          name={`censor-type-${k}`}\n                          options={Object.keys(CENSOR_TYPES).map(\n                            ct => ({ value: ct, label: CENSOR_TYPES[ct].label })\n                          )}\n                        />\n                      </td>\n                      <td>strength</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </span> */}\n            <section>\n              <label for=\"classification-server-url\">Classification server url</label>\n              <span className=\"row\">\n                <FieldInput name=\"classification-server-url\" type=\"text\" />\n                <span className={`status-light status-light--status-${classificationServerStatus}`} />\n              </span>\n            </section>\n            <section>\n              <label for=\"detection-server-url\">Detection server url</label>\n              <span className=\"row\">\n                <FieldInput name=\"detection-server-url\" type=\"text\" />\n                <span className={`status-light status-light--status-${detectionServerStatus}`} />\n              </span>\n            </section>\n            <section>\n              <input type=\"submit\" value=\"Save\" />\n            </section>\n          </form>\n        )}\n      </Form>\n      <section>\n        <button onClick={restoreDefaults}>Restore defaults</button>\n      </section>\n    </div >\n  )\n}\n\nexport default Popup;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Popup from './Popup';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Popup />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}